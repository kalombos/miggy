[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["peewee_migrate"]


[project]
name = "peewee-migrate2"
version = "1.6.5"
authors = [
  {name = "Gorshkov Nikolay", email = "nogamemorebrain@gmail.com"},
  {name = "Kirill Klenov"},
  {name = "spumer"},
]

description = "a database migration tool for usage with the peewee ORM"
readme = "README.rst"
requires-python = ">=3.10"
classifiers=[
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: BSD License',
    'Natural Language :: English',
    'Natural Language :: Russian',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Software Development :: Testing',
    'Topic :: Utilities',
]
license = "BSD-4-Clause"

dependencies = [
    "peewee>=3.17.9",
    "click>=6.7"
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.2",
    "psycopg2-binary>=2.8.1",
    "build",
    "twine",
    "ruff==0.14.0",
    "poethepoet==0.37.0",
    "mypy==1.18.2",
    "types-peewee"
]



[project.urls]
Homepage = "https://github.com/kalombos/peewee_migrate2"
Issues = "https://github.com/kalombos/peewee_migrate2/issues"


[project.scripts]
pw_migrate = "peewee_migrate.cli:cli"


[tool.mypy]
exclude = "(venv|migrations)"

[tool.ruff]
line-length = 120
[tool.ruff.lint]
select = [
    'UP035',
    'F',
    'E',
    'I',
    'TC'
]

[tool.poe.tasks.lint]
help = "Run the type checker"
cmd  = "ruff check"

[tool.poe.tasks.types]
help = "Run the type checker"
cmd  = "mypy ."

[tool.poe.tasks.check_format]
help = "Run the format checker"
cmd  = "ruff format --check"

[tool.poe.tasks.format_by_checker]
help = "Run the check formater"
cmd  = "ruff check --fix-only -e"

[tool.poe.tasks.format_by_formatter]
help = "Run the ruff formatter"
cmd  = "ruff format"

[tool.poe.tasks.format]
help = "Run ruff check and ruff format formatters"
sequence  = ["format_by_checker", "format_by_formatter"]

[tool.poe.tasks.test]
help = "Run tests"
cmd  = "pytest -vv -x"

[tool.poe.tasks.check]
help = "Run all checks on the code base"
sequence = ["lint", "check_format", "types", "test"]